%----------------------------------------------------------------------------------------
%	PACKAGES AND OTHER DOCUMENT CONFIGURATIONS
%----------------------------------------------------------------------------------------

\documentclass{article}

\usepackage{fancyhdr} % Required for custom headers
\usepackage{lastpage} % Required to determine the last page for the footer
\usepackage{extramarks} % Required for headers and footers
\usepackage{graphicx} % Required to insert images
\usepackage{listings}
\usepackage{color}
\usepackage{xcolor}
\usepackage{caption}
\usepackage{enumitem}
\usepackage{amsmath}
\usepackage{tikz}
\usetikzlibrary{calc,shapes.multipart,chains,arrows}

\DeclareCaptionFont{white}{\color{white}}
\DeclareCaptionFormat{listing}{%
\parbox{\textwidth}{\colorbox{gray}{\parbox{\textwidth}{#1#2#3}}\vskip-4pt}}
\captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white}

% Margins
\topmargin=-0.45in
\evensidemargin=0in
\oddsidemargin=0in
\textwidth=6.5in
\textheight=9.0in
\headsep=0.25in 

\linespread{1.1} % Line spacing

% Set up the header and footer
\pagestyle{fancy}
\lhead{\hmwkAuthorName} % Top left header
\chead{\hmwkClass\ (\hmwkClassInstructor\ \hmwkClassTime): \hmwkTitle} % Top center header
\rhead{\hmwkDueDate} % Top right header
\lfoot{\lastxmark} % Bottom left footer
\cfoot{} % Bottom center footer
\rfoot{Page\ \thepage\ of\ \pageref{LastPage}} % Bottom right footer
\renewcommand\headrulewidth{0.4pt} % Size of the header rule
\renewcommand\footrulewidth{0.4pt} % Size of the footer rule

\setlength\parindent{0pt} % Removes all indentation from paragraphs

%----------------------------------------------------------------------------------------
%	DOCUMENT STRUCTURE COMMANDS
%	Skip this unless you know what you're doing
%----------------------------------------------------------------------------------------

\setcounter{secnumdepth}{0} % Removes default section numbers
\newcounter{homeworkProblemCounter} % Creates a counter to keep track of the number of problems

\newcommand{\homeworkProblemName}{}
\newenvironment{homeworkProblem}[1][Problem \arabic{homeworkProblemCounter}]{ % Makes a new environment called homeworkProblem which takes 1 argument (custom name) but the default is "Problem #"
\stepcounter{homeworkProblemCounter} % Increase counter for number of problems
\renewcommand{\homeworkProblemName}{#1} % Assign \homeworkProblemName the name of the problem
\section{\homeworkProblemName} % Make a section in the document with the custom problem count
}

%----------------------------------------------------------------------------------------
%   COLORS AND LANGUAGAGE
%----------------------------------------------------------------------------------------

\lstset{
    frame=lrb,xleftmargin=\fboxsep,xrightmargin=-\fboxsep,language=Java,basicstyle=\ttfamily,
    breaklines=true,columns=fullflexible,keepspaces=true,escapeinside={\%*}{*)}
       }

%----------------------------------------------------------------------------------------
%	NAME AND CLASS SECTION
%----------------------------------------------------------------------------------------

\newcommand{\hmwkTitle}{Homework\ \#1} % Assignment title
\newcommand{\hmwkDueDate}{Friday,\ January\ 30,\ 2015} % Due date
\newcommand{\hmwkClass}{COT\ 5407} % Course/class
\newcommand{\hmwkClassTime}{5:00pm} % Class/lecture time
\newcommand{\hmwkClassInstructor}{Xie} % Teacher/lecturer
\newcommand{\hmwkAuthorName}{Musa V. Ahmed} % Your name

%----------------------------------------------------------------------------------------

\begin{document}
\belowcaptionskip=-10pt

%----------------------------------------------------------------------------------------
%	PROBLEM 1
%----------------------------------------------------------------------------------------

\begin{homeworkProblem}
    Order the following function by growth rate. $n!$, $n^2+\sqrt{n}$ $log^{10}n$, $n^{1/3}$,
    $log^{100}n$, $n^3$, $2^n$, $10^{\sqrt{n}}$, $2^{log n}$, $2^{2 log n}$, $2^{\sqrt{log
    n}}$, $128$, $128n$. Indicate which functions at the same rate (all
    logarithms are base 2). For example, if you are asked to order $n$, $2n$, $2n^2$, then your answer should be
    "$n=\Theta{(2n)}, 2n=o(2n^2)$".

\end{homeworkProblem}
%\clearpage

%----------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------
%	PROBLEM 2
%----------------------------------------------------------------------------------------

\begin{homeworkProblem}
    Solve the following recurrence equations, expressing the answer in Big-Oh notation. Assume
    that $T{n}$ is constant for sufficiently small $n$.

    \begin{enumerate}[label=(\alph*)]
        \item $T(n) = T(n/2) + 100$
        \item $T(n) = 8T(n/2) + n^2$ 
        \item $T(n) = 8T(n/2) + n^3$
        \item $T(n) = 8T(n/2) + n^4$
        \item $T(n) = T(n-1) + log n$
        \item $T(n) = T(n-3) + n$
    \end{enumerate}

\end{homeworkProblem}
%\clearpage

%----------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------
%	PROBLEM 3
%----------------------------------------------------------------------------------------

\begin{homeworkProblem}
   You implemented a quadratic time algorithm for a problem $P$. On a test run, your algorithm
   takes 50 seconds for inputs of size 1000. Your classmate found a clever algorithm solving
   the same problem with a running time $O(n^{3/2})$. However, the faster algorithm takes 150
   seconds for input of size 1000. Explain how can this happen. If you need to solve a problem
   of size 4000, which algorithm you should use? What about input of size 10,000? Explain your
   answers (assume low-order terms are negligible).

\end{homeworkProblem}
%\clearpage

%----------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------
%	PROBLEM 4
%----------------------------------------------------------------------------------------

\begin{homeworkProblem}
    Recall that in the \emph{testing safe height to drop a cellphone} problem we discussed in
    the class, the goal is to find out the maximum safe height to drop a cellphone without
    breaking it. In the class we saw that if the maximum safe height is $n$, then in the worst
    case we can perform $n$ tests if there is only one cellphone and $2\sqrt{n}$ tests if there
    are two cellphones. Give an algorithm to minimize the number of tests if there are $k$
    cellphones available (assume $k$ is constant). How many tests do you need to perform?

\end{homeworkProblem}
%\clearpage

%----------------------------------------------------------------------------------------

\end{document}
